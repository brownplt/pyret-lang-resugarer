core
  values

	S : String * Int * Int * Int * Int -> S;
    Z : S;
    Value : String -> Expr;

	Id : S * String -> Expr;
	Num : S * String -> Expr;
    IntNum : S * Int -> Expr;
	True : S -> Expr;
	False : S -> Expr;
	Str : S * String -> Expr;

	Lam : S * [String] * [Bind] * Ann * String * Expr * Expr -> Expr;
	Method : S * [Bind] * Ann * String * Expr * Expr -> Expr;

	Obj : S * [Member] -> Expr;

	Bind : S * String * Ann -> Bind;

	# Annotations #

	ABlank : Ann;
	AAny : Ann;
	AName : S * String -> Ann;
	AArrow : S * [Ann] * Ann -> Ann;
	AMethod : S * [Ann] * Ann -> Ann;
	ARecord : S * [AField] -> Ann;
	AField : S * String * Ann -> AField;
	APred : S * Ann * Expr -> Ann;
	AApp : S * String * [Ann] -> Ann;
	ADotApp : S * ADot * [Ann] -> Ann;
	ADot : S * String * String -> ADot;


  constructors

    Prog : S * [Header] * Expr -> Prog;


    # Headers #

    ImportString : S * String * String -> Header;
	ImportSymbol : S * String * String -> Header;
	Provide : S * Expr -> Header;


    # Statements #

	Block : S * [Expr] -> Expr;
    Check : S * [Expr] -> Expr;

	Fun : S * String * [String] * [Bind] * Ann * String * Expr * Expr -> Expr;
	Var : S * Bind * Expr -> Expr;
	Let : S * Bind * Expr -> Expr;
	Assign : S * String * Expr -> Expr;
	
	IfElse : S * [IfBranch] * Expr -> Expr;
	IfBranch : S * Expr * Expr -> IfBranch;
	
	Data : S * String * [String] * [Variant] * [Member] * Expr -> Expr;
	Variant : S * String * [Bind] * [Member] -> Variant;
	SingletonVariant : S * String * [Member] -> Variant;

	DataField : S * Expr * Expr -> Member;
	MethodField : S * Expr * [Bind] * Ann * String * Expr * Expr -> Member;

	List : S * [Expr] -> Expr;


    # Expressions #

    UserBlock : S * Expr -> Expr;

	App : S * Expr * [Expr] -> Expr;
	LeftApp : S * Expr * Expr * [Expr] -> Expr;
	CoreTry : S * Expr * Bind * Expr -> Expr;
	
	Dot : S * Expr * String -> Expr;
	Bracket : S * Expr * Expr -> Expr;

	Colon : S * Expr * String -> Expr;
	ColonBracket : S * Expr * Expr -> Expr;

	For : S * Expr * [ForBind] * Ann * Expr -> Expr;
	ForBind : S * Bind * Expr -> ForBind;

	Extend : S * Expr * [Member] -> Expr;
    Update : S * Expr * [Member] -> Expr;



surface

  values

    S : String * Int * Int * Int * Int -> S;
    Z : S;
    Value : String -> Expr;

	Id : S * String -> Expr;
	Num : S * String -> Expr;
    IntNum : S * Int -> Expr;
	True : S -> Expr;
	False : S -> Expr;
	Str : S * String -> Expr;

	Lam : S * [String] * [Bind] * Ann * String * Expr * Expr -> Expr;
	Method : S * [Bind] * Ann * String * Expr * Expr -> Expr;

	Obj : S * [Member] -> Expr;

	Bind : S * String * Ann -> Bind;

	# Annotations #

	ABlank : Ann;
	AAny : Ann;
	AName : S * String -> Ann;
	AArrow : S * [Ann] * Ann -> Ann;
	AMethod : S * [Ann] * Ann -> Ann;
	ARecord : S * [AField] -> Ann;
	AField : S * String * Ann -> AField;
	APred : S * Ann * Expr -> Ann;
	AApp : S * String * [Ann] -> Ann;
	ADotApp : S * ADot * [Ann] -> Ann;
	ADot : S * String * String -> ADot;


    # Temporaries #

    BuildLocation : S -> Expr;
#    ReplaceTyparams : [String] * Ann -> Ann;
#    LookupOp : String -> OpName;
#    FlattenBlocks : [Block] -> Block;


  constructors

    Prog : S * [Header] * Expr -> Prog;


    # Headers #

    ImportString : S * String * String -> Header;
	ImportSymbol : S * String * String -> Header;
	Provide : S * Expr -> Header;
	ProvideAll : S -> Header;


    # Statements #

	Block : S * [Expr] -> Expr;

	Fun : S * String * [String] * [Bind] * Ann * String * Expr * Expr -> Expr;
	Var : S * Bind * Expr -> Expr;
	Let : S * Bind * Expr -> Expr;
	When : S * Expr * Expr -> Expr;
	Assign : S * String * Expr -> Expr;
	
	If : S * [IfBranch] -> Expr;
	IfElse : S * [IfBranch] * Expr -> Expr;
	IfBranch : S * Expr * Expr -> IfBranch;
	
	Cases : S * Ann * Expr * [CasesBranch] -> Expr;
	CasesElse : S * Ann * Expr * [CasesBranch] * Expr -> Expr;
	CasesBranch : S * String * [Bind] * Expr -> CasesBranch;

	Data : S * String * [String] * [Variant] * [Member] * Expr -> Expr;
	Variant : S * String * [Bind] * [Member] -> Variant;
	SingletonVariant : S * String * [Member] -> Variant;

	DataField : S * Expr * Expr -> Member;
	MethodField : S * Expr * [Bind] * Ann * String * Expr * Expr -> Member;


    # Expressions #

    UserBlock : S * Expr -> Expr;

	Paren : S * Expr -> Expr;
	
	Not : S * Expr -> Expr;
    Op : S * String * Expr * Expr -> Expr;
	App : S * Expr * [Expr] -> Expr;
	LeftApp : S * Expr * Expr * [Expr] -> Expr;
	Try : S * Expr * Bind * Expr -> Expr;
	
	Dot : S * Expr * String -> Expr;
	Bracket : S * Expr * Expr -> Expr;

	Colon : S * Expr * String -> Expr;
	ColonBracket : S * Expr * Expr -> Expr;

	Extend : S * Expr * [Member] -> Expr;
    Update : S * Expr * [Member] -> Expr;

	For : S * Expr * [ForBind] * Ann * Expr -> Expr;
	ForBind : S * Bind * Expr -> ForBind;

	List : S * [Expr] -> Expr;

    Graph : S * [Expr] -> Expr;



rules


  (* src might be serialized differently *)
  BuildLocation(S(src, line, col, pos, span)) ->
    App(S(src, line, col, pos, span),
     Bracket(S(src, line, col, pos, span),
       Id(S(src, line, col, pos, span), "error"),
         Str(S(src, line, col, pos, span), "location")),
     [Str(S(src, line, col, pos, span), src),
      IntNum(S(src, line, col, pos, span), line),
      IntNum(S(src, line, col, pos, span), col)]);

  (* ImportSymbol: performs string-manipulation *)
  (* ProvideAll: non-compositional; traverses program body *)
  (* Block: flattens blocks together *)

  (* Incomplete w.r.t. type params (Pyret weirdness) *)
  Fun(s, name, typarams, args, ann, doc, body, check) ->
    Let(s, Bind(s, name, ABlank),
      Lam(s, typarams, args, ann, doc, body, check));

  Check(s, body) -> Id(s, "nothing");

  (* Graph: complicated *)

  When(s, test, body) ->
    IfElse(s, [IfBranch(s, test, body)],
     Block(s, [Id(s, "p:nothing")]));

  If(s, branches) ->
    IfElse(s, branches, Block(s,
      [App(s, Id(s, "raise"),
	    [Str(s, "if: no tests matchedq")])]));

  Try(s, try, Bind(s2, v, ann), catch) ->
    CoreTry(s, try, Bind(s2, exn_id, ann),
      Block(s,
        [App(s,
           Lam(s, [], [Bind(s2, v, ann)], ABlank, "", catch, Block(s, [])),
           [App(s, Bracket(s, Id(s, "error"), Str(s, "make-error")),
                [Id(s, exn_id)])])]))
    fresh exn_id;

  (* Try: not idempotent, uses gensym *)

  Cases(s, type, val, cases) ->
    CasesElse(s, type, val, cases,
      Block(s, [App(s, Id(s, "raise"),
                [Str(s, "cases: no cases matched")])]));

  (* Some srclocs should be extracted *)
  CasesElse(s, type, val, [CasesBranch(s2, name, args, body) ...], else) ->
    Block(s, [Let(s, Bind(s, temp, type), val),
              App(s, Dot(s, Id(s, temp), "_match"),
              [Obj(s, [DataField(s2, Str(s2, name),
                        Lam(s2, [], args, ABlank, "",
                            body, Block(s2, []))) ...]),
               Lam(s, [], [], ABlank, "", else, Block(s, []))])])
  fresh temp;

  For(s, iter, [ForBind(s2, bs, es) ...], ann, body) ->
    App(s, iter, [Lam(s, [], [bs ...], ann, "", body, Block(s, [])),
                  es ...]);
  
  (* Uses pretty *)
  Op(s, "is", x, y) ->
    App(s, Bracket(s, Id(s, "checkers"), Str(s, "check-is")),
      [Str(s, "--is-check--"),
       Lam(s, [], [], ABlank, "", x, Block(s, [])),
       Lam(s, [], [], ABlank, "", y, Block(s, [])),
       BuildLocation(s)]);

  (* Uses pretty *)
  Op(s, "raises", x, y) ->
    App(s, Bracket(s, Id(s, "checkers"), Str(s, "check-raises")),
      [Str(s, "--raises-check--"),
       Lam(s, [], [], ABlank, "", x, Block(s, [])),
       y,
       BuildLocation(s)]);

  (* No support for '_' syntax *)
  Not(s, e) -> App(s, Bracket(s, e, Str(s, "_not")), []);
  Op(s, "==", x, y) ->
    App(s, Bracket(s, Id(s, "builtins"), Str(s, "equiv")), [x, y]);
  Op(s, "<>", x, y) ->
    App(s, Bracket(s, Op(s, "==", x, y), Str(s, "_not")), []);
  Op(s, "or", x, y) ->
    App(s, Bracket(s, x, Str(s, "_or")),
           [Lam(s, [], [], ABlank, "", Block(s, [y]), Block(s, []))]);
  Op(s, "and", x, y) ->
    App(s, Bracket(s, x, Str(s, "_and")),
           [Lam(s, [], [], ABlank, "", y, Block(s, []))]);
  Op(s, "+", x, y)  -> App(s, Bracket(s, x, Str(s, "_plus")), [y]);
  Op(s, "*", x, y)  -> App(s, Bracket(s, x, Str(s, "_times")), [y]);
  # Op(s, "+", x, y) ->
  #   Block(s, [Let(s, Bind(s, "temp", ABlank),
  #                 Obj(s, [DataField(s, Str(s, "left"), x),
  #                         DataField(s, Str(s, "right"), y)])),
  #             App(s, Bracket(s, Bracket(s, Id(s, "temp"), Str(s, "left")),
  #                               Str(s, "_plus")),
  #                    [Bracket(s, Id(s, "temp"), Str(s, "right"))])]);
  # Op(s, "*", x, y) ->
  #   Block(s, [Let(s, Bind(s, "temp", ABlank),
  #                 Obj(s, [DataField(s, Str(s, "left"), x),
  #                         DataField(s, Str(s, "right"), y)])),
  #             App(s, Bracket(s, Bracket(s, Id(s, "temp"), Str(s, "left")),
  #                               Str(s, "_times")),
  #                    [Bracket(s, Id(s, "temp"), Str(s, "right"))])]);
  Op(s, "-", x, y)  -> App(s, Bracket(s, x, Str(s, "_minus")), [y]);
  Op(s, "/", x, y)  -> App(s, Bracket(s, x, Str(s, "_divide")), [y]);
  Op(s, "<=", x, y) -> App(s, Bracket(s, x, Str(s, "_lessequal")), [y]);
  Op(s, "<", x, y)  -> App(s, Bracket(s, x, Str(s, "_lessthan")), [y]);
  Op(s, ">=", x, y) -> App(s, Bracket(s, x, Str(s, "_greaterequal")), [y]);
  Op(s, ">", x, y)  -> App(s, Bracket(s, x, Str(s, "_greaterthan")), [y]);

  Paren(s, x) -> x;

  LeftApp(s, target, fun, [args ...]) ->
    App(s, fun, [target, args ...]);

  List(s, []) -> Bracket(s, Id(s, "list"), Str(s, "empty"));
  List(s, [elt, elts ...]) ->
    App(s, Bracket(s, Id(s, "list"), Str(s, "link")),
      [elt, List(s, [elts ...])]);

  Dot(s, val, field) -> Bracket(s, val, Str(s, field));
  Colon(s, obj, field) -> ColonBracket(s, obj, Str(s, field));
